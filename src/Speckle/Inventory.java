package Speckle;

import java.awt.Component;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author Astralsphere Arts
 */
public class Inventory extends javax.swing.JPanel {

    /**
     * Creates new form Inventory
     */
    public Inventory() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Heading = new javax.swing.JLabel();
        Table_Container = new javax.swing.JScrollPane();
        Inventory = new javax.swing.JTable();
        Update = new javax.swing.JButton();
        Add = new javax.swing.JButton();
        Remove = new javax.swing.JButton();
        Change = new javax.swing.JButton();

        Heading.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        Heading.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Heading.setText("Inventory");
        Heading.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        Inventory.setAutoCreateRowSorter(true);
        Inventory.setModel(DbUtils.resultSetToTableModel(SQLite.Main.invenData()));
        Inventory.setShowGrid(true);
        Inventory.getTableHeader().setReorderingAllowed(false);
        Table_Container.setViewportView(Inventory);
        final TableColumnModel columnModel = Inventory.getColumnModel();
        for (int column = 0; column < Inventory.getColumnCount(); column++) {
            int width = 15;
            for (int row = 0; row < Inventory.getRowCount(); row++) {
                TableCellRenderer renderer = Inventory.getCellRenderer(row, column);
                Component comp = Inventory.prepareRenderer(renderer, row, column);
                width = Math.max(comp.getPreferredSize().width +1 , width);
            }
            if(width > 300) width=300;
            columnModel.getColumn(column).setPreferredWidth(width);
        }

        Update.setText("Update Stock");
        Update.setToolTipText("Update Stocks for Selected Item");

        Add.setText("Add");
        Add.setToolTipText("Add a New Item to Inventory");

        Remove.setText("Remove");
        Remove.setToolTipText("Remove Selected Products from Inventory");
        Remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveActionPerformed(evt);
            }
        });

        Change.setText("Change");
        Change.setToolTipText("Change Properties of Selected Item in the Inventory");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Heading, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(Add, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Remove, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Change, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(40, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Update, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Table_Container, javax.swing.GroupLayout.PREFERRED_SIZE, 860, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(48, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(Heading, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Table_Container, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Change, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Remove, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Add, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(Update, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(70, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void RemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveActionPerformed
        DefaultTableModel model = (DefaultTableModel) this.Inventory.getModel();
        int[] rows = Inventory.getSelectedRows();
        for(int i=0; i<rows.length; i++) {
            String id = Inventory.getModel().getValueAt(rows[i]-i, 0).toString();
            SQLite.Main.remRowInven(id);
            model.removeRow(rows[i]-i);
        }
    }//GEN-LAST:event_RemoveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add;
    private javax.swing.JButton Change;
    private javax.swing.JLabel Heading;
    private javax.swing.JTable Inventory;
    private javax.swing.JButton Remove;
    private javax.swing.JScrollPane Table_Container;
    private javax.swing.JButton Update;
    // End of variables declaration//GEN-END:variables
}
