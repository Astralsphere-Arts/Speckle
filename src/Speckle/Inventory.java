package Speckle;

import java.awt.Component;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Astralsphere Arts
 */
public class Inventory extends javax.swing.JPanel {

    /**
     * Creates new form Inventory
     */
    public Inventory() {
        initComponents();
        this.Inventory_Model = (DefaultTableModel) this.Inventory_Table.getModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Heading = new javax.swing.JLabel();
        Inventory_Table_Container = new javax.swing.JScrollPane();
        Inventory_Table = new javax.swing.JTable();
        Add = new javax.swing.JButton();
        Remove = new javax.swing.JButton();
        Update = new javax.swing.JButton();

        Heading.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        Heading.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Heading.setText("Inventory");
        Heading.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        Inventory_Table.setModel(Internal.SQLite.invenData());
        Inventory_Table.setShowGrid(true);
        Inventory_Table.getTableHeader().setReorderingAllowed(false);
        Inventory_Table.getModel().addTableModelListener(new javax.swing.event.TableModelListener() {
            public void tableChanged(javax.swing.event.TableModelEvent evt) {
                InventoryTableChanged(evt);
            }
        });
        Inventory_Table_Container.setViewportView(Inventory_Table);
        final TableColumnModel columnModel = Inventory_Table.getColumnModel();
        for (int column = 0; column < Inventory_Table.getColumnCount(); column++) {
            int width = 15;
            for (int row = 0; row < Inventory_Table.getRowCount(); row++) {
                TableCellRenderer renderer = Inventory_Table.getCellRenderer(row, column);
                Component comp = Inventory_Table.prepareRenderer(renderer, row, column);
                width = Math.max(comp.getPreferredSize().width + 1 , width);
            }
            if (width > 300) width=300;
            columnModel.getColumn(column).setPreferredWidth(width);
        }

        Add.setText("Add");
        Add.setToolTipText("Add a New Product to Inventory");
        Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddActionPerformed(evt);
            }
        });

        Remove.setText("Remove");
        Remove.setToolTipText("Remove Selected Products from Inventory");
        Remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveActionPerformed(evt);
            }
        });

        Update.setText("Update Stock");
        Update.setToolTipText("Increase Available Quantity for Selected Product");
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(40, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Add, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Remove, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Update, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(Inventory_Table_Container, javax.swing.GroupLayout.PREFERRED_SIZE, 860, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(Heading, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(48, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(Heading, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Inventory_Table_Container, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Remove, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Add, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Update, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(70, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void InventoryTableChanged(javax.swing.event.TableModelEvent evt) {
        for (int row = 0; row < Inventory_Table.getRowCount(); row++) {
            String id = (String) Inventory_Table.getValueAt(row, 0);
            String name = (String) Inventory_Table.getValueAt(row, 1);
            String price = (String) Inventory_Table.getValueAt(row, 2);
            String quan = (String) Inventory_Table.getValueAt(row, 3);
            Internal.SQLite.updateInven(id, name, price, quan);
        }
    }
    
    private void AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddActionPerformed
        Inventory_Model.addRow(new Object[] {"SPK-" + Internal.Random.ID(4)
            + "-" + Internal.Random.ID(4), null, null, null});
    }//GEN-LAST:event_AddActionPerformed

    private void RemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveActionPerformed
        int[] rows = Inventory_Table.getSelectedRows();
        for (int i=0; i<rows.length; i++) {
            String id = Inventory_Table.getValueAt(rows[i]-i, 0).toString();
            Internal.SQLite.remRowInven(id);
            Inventory_Model.removeRow(rows[i]-i);
        }
    }//GEN-LAST:event_RemoveActionPerformed

    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed
        int row = Inventory_Table.getSelectedRow();
        String id = Inventory_Table.getValueAt(row, 0).toString();
        String quantity;
        if (Inventory_Table.getValueAt(row, 3) == null)
            quantity = "0";
        else
            quantity = Inventory_Table.getValueAt(row, 3).toString();
        String update = JOptionPane.showInputDialog(null, "Enter the Amount of Stock"
            + " You want to Increase", "Update Stock", JOptionPane.PLAIN_MESSAGE);
        String quan = Integer.toString(Integer.parseInt(quantity) + Integer.parseInt(update));
        Internal.SQLite.updateStock(id, quan);
        Speckle.Main.Content.removeAll();
        Inventory scene = new Inventory();
        scene.setBounds(0, 0, 955, 574);
        Speckle.Main.Content.add(scene).setVisible(true);
    }//GEN-LAST:event_UpdateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add;
    private javax.swing.JLabel Heading;
    private javax.swing.JTable Inventory_Table;
    private javax.swing.JScrollPane Inventory_Table_Container;
    private javax.swing.JButton Remove;
    private javax.swing.JButton Update;
    // End of variables declaration//GEN-END:variables
    private final DefaultTableModel Inventory_Model;
}
