package Speckle;

import java.awt.Component;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Astralsphere Arts
 */
public class Inventory extends javax.swing.JPanel {

    /**
     * Creates new form Inventory
     */
    public Inventory() {
        initComponents();
        this.Inventory_Model = (DefaultTableModel) this.Inventory_Table.getModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Heading = new javax.swing.JLabel();
        Inventory_Table_Container = new javax.swing.JScrollPane();
        Inventory_Table = new javax.swing.JTable();
        Add = new javax.swing.JButton();
        Remove = new javax.swing.JButton();
        Update = new javax.swing.JButton();
        Import = new javax.swing.JButton();
        Export = new javax.swing.JButton();

        Heading.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        Heading.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Heading.setText("Inventory");
        Heading.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        Inventory_Table.setModel(Internal.Function.invenTableModel());
        Inventory_Table.setShowGrid(true);
        Inventory_Table.getTableHeader().setReorderingAllowed(false);
        Inventory_Table.getModel().addTableModelListener(new javax.swing.event.TableModelListener() {
            public void tableChanged(javax.swing.event.TableModelEvent evt) {
                InventoryTableChanged(evt);
            }
        });
        Inventory_Table_Container.setViewportView(Inventory_Table);
        final TableColumnModel columnModel = Inventory_Table.getColumnModel();
        for (int column = 0; column < Inventory_Table.getColumnCount(); column++) {
            int width = 15;
            for (int row = 0; row < Inventory_Table.getRowCount(); row++) {
                TableCellRenderer renderer = Inventory_Table.getCellRenderer(row, column);
                Component comp = Inventory_Table.prepareRenderer(renderer, row, column);
                width = Math.max(comp.getPreferredSize().width + 1 , width);
            }
            if (width > 300) width=300;
            columnModel.getColumn(column).setPreferredWidth(width);
        }

        Add.setText("Add");
        Add.setToolTipText("Add a New Product to Inventory");
        Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddActionPerformed(evt);
            }
        });

        Remove.setText("Remove");
        Remove.setToolTipText("Remove Selected Products from Inventory");
        Remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveActionPerformed(evt);
            }
        });

        Update.setText("Update Stock");
        Update.setToolTipText("Increase Available Quantity for Selected Product");
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });

        Import.setText("Import");
        Import.setToolTipText("Import Inventory Data from a CSV File");
        Import.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImportActionPerformed(evt);
            }
        });

        Export.setText("Export");
        Export.setToolTipText("Export Inventory Data to a CSV File");
        Export.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Add, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Remove, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Update, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(206, 206, 206)
                        .addComponent(Import, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Export, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(Inventory_Table_Container, javax.swing.GroupLayout.PREFERRED_SIZE, 860, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(2, 2, 2)
                            .addComponent(Heading, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(Heading, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Inventory_Table_Container, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Remove, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Add, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Update, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Export, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Import, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(70, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void InventoryTableChanged(javax.swing.event.TableModelEvent evt) {
        for (int row = 0; row < Inventory_Table.getRowCount(); row++) {
            String PID = (String) Inventory_Table.getValueAt(row, 0);
            String name = (String) Inventory_Table.getValueAt(row, 1);
            String price = null;
            if (Inventory_Table.getValueAt(row, 2) != null)
                price = Double.toString((Double) Inventory_Table.getValueAt(row, 2));
            String quan = null;
            if (Inventory_Table.getValueAt(row, 3) != null)
                quan = Integer.toString((Integer) Inventory_Table.getValueAt(row, 3));
            Internal.SQLite.updateInven(PID, name, price, quan);
        }
    }
    
    private void AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddActionPerformed
        Inventory_Model.addRow(new Object[] {"SPK-" + Internal.Function.randomID(4)
            + "-" + Internal.Function.randomID(4), null, null, null});
    }//GEN-LAST:event_AddActionPerformed

    private void RemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveActionPerformed
        int[] rows = Inventory_Table.getSelectedRows();
        for (int i=0; i<rows.length; i++) {
            String PID = Inventory_Table.getValueAt(rows[i]-i, 0).toString();
            Internal.SQLite.remRowInven(PID);
            Inventory_Model.removeRow(rows[i]-i);
        }
    }//GEN-LAST:event_RemoveActionPerformed

    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed
        int row = Inventory_Table.getSelectedRow();
        if (row == -1)
            JOptionPane.showMessageDialog(null, "Please Select a Product to Update it's"
                + " Stock.", "No Product Selected", JOptionPane.ERROR_MESSAGE);
        else {
            String PID = Inventory_Table.getValueAt(row, 0).toString();
            int quantity = 0;
            if (Inventory_Table.getValueAt(row, 3) != null)
                quantity = (Integer) Inventory_Table.getValueAt(row, 3);
            String update = JOptionPane.showInputDialog(null, "Enter the Amount of Stock"
                + " You want to Increase", "Update Stock", JOptionPane.PLAIN_MESSAGE);
            if (update.equals(""))
                update = "0";
            String quan = Integer.toString(quantity + Integer.parseInt(update));
            Internal.SQLite.updateStock(PID, quan);
            Speckle.Main.Content.removeAll();
            Inventory scene = new Inventory();
            scene.setBounds(0, 0, 948, 574);
            Speckle.Main.Content.add(scene).setVisible(true);
        }
    }//GEN-LAST:event_UpdateActionPerformed

    private void ImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImportActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Import from CSV");
        fileChooser.setFileFilter(new FileNameExtensionFilter("CSV File", "csv"));
        if (fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            Internal.Function.invenCSVim(fileChooser.getSelectedFile());
            JOptionPane.showMessageDialog(null, "Inventory Data Imported Successfully!",
                "Success", JOptionPane.INFORMATION_MESSAGE);
            Speckle.Main.Content.removeAll();
            Inventory scene = new Inventory();
            scene.setBounds(0, 0, 948, 574);
            Speckle.Main.Content.add(scene).setVisible(true);
        }
    }//GEN-LAST:event_ImportActionPerformed

    private void ExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Export to CSV");
        fileChooser.setDialogType(JFileChooser.SAVE_DIALOG);
        fileChooser.setSelectedFile(new File("Inventory-" + new java.text.SimpleDateFormat("dd-MM-yyyy")
            .format(new java.util.Date()) + ".csv"));
        fileChooser.setFileFilter(new FileNameExtensionFilter("CSV File", "csv"));
        if (fileChooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            Internal.Function.invenCSVex(fileChooser.getSelectedFile());
            JOptionPane.showMessageDialog(null, "Inventory Data Exported Successfully!",
                "Success", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_ExportActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add;
    private javax.swing.JButton Export;
    private javax.swing.JLabel Heading;
    private javax.swing.JButton Import;
    private javax.swing.JTable Inventory_Table;
    private javax.swing.JScrollPane Inventory_Table_Container;
    private javax.swing.JButton Remove;
    private javax.swing.JButton Update;
    // End of variables declaration//GEN-END:variables
    private final DefaultTableModel Inventory_Model;
}
